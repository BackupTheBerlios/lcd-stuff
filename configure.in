dnl
dnl configure.in for qalculate
dnl

dnl  ----------------------
dnl | initialize autotools |---------------------------------------------------
dnl  ----------------------

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(lcd-stuff, 0.1.2)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl  -------------------------------
dnl | check for neccessary programs |------------------------------------------
dnl  -------------------------------

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_HEADER_STDC
AC_HEADER_STDBOOL

dnl  ------------------------------------
dnl | check for compiler characteristics |-------------------------------------
dnl  ------------------------------------

dnl Replace -Os with -O2 to stop segfault on startup
if test "x$GCC" = "xyes"; then
	case $CFLAGS in
	*-Os*)
		CFLAGS="$CFLAGS -O2"
		;;
	esac
	case $CXXFLAGS in
	*-Os*)
		CXXFLAGS="$CXXFLAGS -O2"
		;;
	esac
fi

dnl Many people on non-GNU/Linux systems don't have getopt
AC_CONFIG_LIBOBJ_DIR(shared)
AC_CHECK_FUNC(getopt_long,
  [
    AC_ARG_WITH(included-getopt,
      [  --with-included-getopt  Use the included getopt rather than glibc's],
      with_getopt=$withval,
      with_getopt=$no)
    if test "x$with_getopt" = xyes; then
      AC_LIBOBJ(getopt)
      AC_LIBOBJ(getopt1)
    fi
  ],
  [
    AC_LIBOBJ(getopt)
    AC_LIBOBJ(getopt1)
  ])


dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
    *[\ \	]-Wall[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl


dnl  --------------------------------
dnl | check for neccessary libraries |-----------------------------------------
dnl  --------------------------------

dnl AC_CHECK_LIB(pthread, pthread_create, [LIBS="$LIBS -lpthread"])


dnl Libetpan
AC_MSG_CHECKING([whether to use libetpan])
AC_ARG_ENABLE(libetpan,
        [  --disable-libetpan           Do not compile IMAP4 support with libetpan],
        [ac_cv_enable_libetpan=$enableval], [ac_cv_enable_libetpan=yes])
if test x"$ac_cv_enable_libetpan" = xyes; then
        AC_MSG_RESULT(yes)
        libetpan_result=no
        AC_PATH_PROG(libetpanconfig, [libetpan-config])
        if test "x$libetpanconfig" != "x"; then
          CPPFLAGS="$CPPFLAGS `$libetpanconfig --cflags 2>/dev/null`"
          AC_CHECK_HEADER(libetpan/libetpan.h, [libetpan_result=yes])
          if test "x$libetpan_result" = "xyes"; then
            AC_MSG_CHECKING([whether libetpan-config hints compiles and links fine])
            LDFLAGS="$LDFLAGS `$libetpanconfig --libs 2>/dev/null`"
            AC_CHECK_LIB([etpan], [db_mailstorage_init], [libetpan_result=yes])
            AC_MSG_RESULT([$libetpan_result])
          fi
        fi
        if test "x$libetpan_result" = "xyes"; then
           LIBETPAN_CPPFLAGS="`$libetpanconfig --cflags`"
           LIBETPAN_LIBS="`$libetpanconfig --libs`"
           LIBETPAN_VERSION=`$libetpanconfig --version | sed "s/\.//g" | sed "s/-.*$//"`
           if test "$LIBETPAN_VERSION" -lt "041"; then
                AC_MSG_RESULT([*** lcd-stuff requires libetpan 0.41 or newer. See http://www.etpan.org/])
                AC_MSG_RESULT([*** You can use --disable-libetpan if you don't need IMAP4 support.])
                AC_MSG_ERROR([libetpan 0.41 not found])
           fi
           AC_SUBST(LIBETPAN_FLAGS)
           AC_SUBST(LIBETPAN_LIBS)
           AC_DEFINE(HAVE_LIBETPAN, 1, Define if you want IMAP support.)
        else
           AC_MSG_RESULT([*** lcd-stuff requires libetpan 0.41 or newer. See http://www.etpan.org/ ])
           AC_MSG_RESULT([*** You can use --disable-libetpan if you don't need IMAP4 support.])
           AC_MSG_ERROR([libetpan 0.41 not found])
        fi
else
        AC_MSG_RESULT(no)
fi

dnl building mail ?
AM_CONDITIONAL(LCDSTUFF_MAIL, test "x$libetpan_result" = "xyes")
if test "x$libetpan_result" = "xyes" ; then
    AC_DEFINE([HAVE_LCDSTUFF_MAIL], [1], [Define 1 if mail support is built])
fi

dnl ***********************************
dnl *** Check for taglib_c          ***
dnl ***********************************
TAGLIBC_LIBS=""
TAGLIBC_CFLAGS=""
AC_ARG_ENABLE(taglib_c,
        [  --disable-taglib_c           Do not compile mp3load support with taglib_c],
        [ac_cv_enable_taglib_c=$enableval], [ac_cv_enable_taglib_c=yes])
if test x"$ac_cv_enable_taglib_c" = xyes; then
        taglib_c_result=no
        AC_CHECK_LIB([tag_c], [taglib_file_new],
        [
          AC_CHECK_HEADER([taglib/tag_c.h],
          [
            TAGLIBC_LIBS="-ltag_c"
            taglib_c_result=yes
            AC_DEFINE([HAVE_TAGLIBC], [1], [Define to 1 if tag_c is found])
          ])
        ])
        AC_SUBST([TAGLIBC_CFLAGS])
        AC_SUBST([TAGLIBC_LIBS])
        if test "x$taglib_c_result" != "xyes" ; then
           AC_MSG_RESULT([*** lcd-stuff requires taglib_c ])
           AC_MSG_RESULT([*** You can use --disable-taglib_c if you don't need mp3load.])
           AC_MSG_ERROR([taglib_c not found])
        fi
fi

dnl building mp3load?
AM_CONDITIONAL(LCDSTUFF_MP3LOAD, test "x$taglib_c_result" = "xyes")
if test "x$taglib_c_result" = "xyes" ; then
    AC_DEFINE([HAVE_LCDSTUFF_MP3LOAD], [1], [Define 1 if mp3load support is enabled])
fi

PKG_PROG_PKG_CONFIG()

MRSS_LIBS=""
MRSS_CFLAGS=""
AC_ARG_ENABLE(mrss,
         [  --disable-mrss               Do not compile rss support with mrss],
         [ac_cv_enable_mrss=$enableval], [ac_cv_enable_mrss=yes])
if test x"$ac_cv_enable_mrss" = xyes; then
         mrss_result="no"
         PKG_CHECK_MODULES(MRSS, [mrss],
         [
            mrss_result="yes"
            AC_SUBST(MRSS_CFLAGS)
            AC_SUBST(MRSS_LIBS)
         ],
         [
            AC_MSG_RESULT([*** lcd-stuff requires mrss ])
            AC_MSG_RESULT([*** You can use --disable-mrss if you don't need rss support.])
            AC_MSG_ERROR([mrss not found])
         ])
fi

NXML_LIBS=""
NXML_CFLAGS=""
AC_ARG_ENABLE(nxml,
        [  --disable-nxml               Do not compile rss and weather support with nxml],
        [ac_cv_enable_nxml=$enableval], [ac_cv_enable_nxml=yes])
if test x"$ac_cv_enable_nxml" = xyes; then
        nxml_result="no"
        PKG_CHECK_MODULES(NXML, [nxml], 
        [
           nxml_result="yes"
           AC_SUBST(NXML_CFLAGS)
           AC_SUBST(NXML_LIBS)
        ],
        [
           AC_MSG_RESULT([*** lcd-stuff requires nxml ])
           AC_MSG_RESULT([*** You can use --disable-nxml if you don't need rss and weather support.])
           AC_MSG_ERROR([nxml not found])
        ])
fi

dnl Should we build weather
AM_CONDITIONAL(LCDSTUFF_WEATHER, test "x$nxml_result" = "xyes")
if test "x$nxml_result" = "xyes" ; then
    AC_DEFINE([HAVE_LCDSTUFF_WEATHER], [1], [Define 1 if weather support is enabled])
fi

dnl Should we build rss
AM_CONDITIONAL(LCDSTUFF_RSS, test "x$nxml_result" = "xyes" -a "x$mrss_result" = "xyes")
if test "x$nxml_result" = "xyes" -a "x$mrss_result" = "xyes" ; then
    AC_DEFINE([HAVE_LCDSTUFF_RSS], [1], [Define 1 if rss support is enabled])
fi

LIBMPD_LIBS=""
LIBMPD_CFLAGS=""
AC_ARG_ENABLE(libmpd,
        [  --disable-libmpd             Do not compile mpd support with libmpd],
        [ac_cv_enable_libmpd=$enableval], [ac_cv_enable_libmpd=yes])
if test x"$ac_cv_enable_libmpd" = xyes; then
        libmpd_result="no"
        PKG_CHECK_MODULES(LIBMPD, [libmpd], 
        [
           libmpd_result="yes"
           AC_SUBST(LIBMPD_CFLAGS)
           AC_SUBST(LIBMPD_LIBS)
        ],
        [
           AC_MSG_RESULT([*** lcd-stuff requires libmpd ])
           AC_MSG_RESULT([*** You can use --disable-libmpd if you don't need rss support.])
           AC_MSG_ERROR([libmpd not found])
        ])
fi

dnl Should we build libmpd
AM_CONDITIONAL(LCDSTUFF_MPD, test "x$libmpd_result" = "xyes")
if test "x$libmpd_result" = "xyes" ; then
    AC_DEFINE([HAVE_LCDSTUFF_MPD], [1], [Define 1 if mpd support is enabled])
fi

PKG_CHECK_MODULES(PACKAGE, [
        glib-2.0
        gthread-2.0
])
AC_SUBST(PACKAGE_CFLAGS)
AC_SUBST(PACKAGE_LIBS)


LIBS="$LIBS $PACKAGE_LIBS $LIBETPAN_LIBS $TAGLIBC_LIBS $NXML_LIBS $MRSS_LIBS $LIBMPD_LIBS"
CFLAGS="$CFLAGS $PACKAGE_CFLAGS $LIBETPAN_FLAGS $TAGLIBC_CFLAGS $NXML_CFLAGS $MRSS_CFLAGS $LIBMPD_CFLAGS"


dnl  --------
dnl | output |-----------------------------------------------------------------
dnl  --------

AC_OUTPUT([
  Makefile
  src/Makefile
  shared/Makefile
  scripts/init-lcd-stuff.debian
  scripts/Makefile
])



